Metadata-Version: 2.4
Name: pdca-shokunin
Version: 2.0.0
Summary: 真實多代理 PDCA 協調系統 - 輕量級職人精神版
Home-page: https://github.com/raiyyang/pdca-shokunin
Author: Raiy Yang
Author-email: Raiy Yang <raiy@example.com>
License: MIT
Project-URL: Homepage, https://github.com/raiyyang/pdca-shokunin
Project-URL: Repository, https://github.com/raiyyang/pdca-shokunin.git
Project-URL: Issues, https://github.com/raiyyang/pdca-shokunin/issues
Keywords: pdca,multi-agent,ai,coordination,claude
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Requires-Dist: anthropic>=0.20.0
Requires-Dist: asyncio-throttle>=1.0.2
Provides-Extra: dev
Requires-Dist: pytest; extra == "dev"
Requires-Dist: black; extra == "dev"
Requires-Dist: flake8; extra == "dev"
Dynamic: author
Dynamic: home-page
Dynamic: requires-python

# PDCA 多代理協調系統 2.0

## 🎯 系統特色

PDCA 2.0 是一個具備智能記憶的 AI 協作系統：

- **尊重您的需求**：從不質疑用戶需求，專注於優化解決方案
- **五大專家協作**：設計、開發、品質、優化專家 + 記錄代理
- **智能記憶系統**：自動分類存儲決策、方案、模式、經驗
- **透明可介入**：清晰的身份標識，隨時可介入調整
- **自我批判精神**：每個專家都會質疑並優化自己的方案

## 🚀 快速開始

### 安裝

```bash
# pip 安裝（推薦）
pip install pdca-shokunin

# 設定 API Key 以啟用真實多代理模式
export ANTHROPIC_API_KEY="your-api-key"

# 或從源碼安裝
git clone https://github.com/raiyyang/pdca-shokunin.git
cd pdca-shokunin
pip install -e .
```

### 基本使用

```bash
# 直接使用 pdca 命令（啟用記錄代理）
pdca 建立一個部落格系統

# 不啟用記錄代理
pdca --no-recorder 快速原型開發

# 配合 Claude CLI 使用
claude -p "$(pdca 優化資料庫查詢效能)"

# 或在 Claude 對話中
claude -p "pdca 設計微服務架構"
```

### 記錄代理使用

```bash
# 手動觸發記錄分析（在 PDCA 任務後）
claude -p "pdca-recorder"

# 或指定任務
claude -p "pdca-recorder 分析登入系統開發過程"
```

### 極簡模式（適合快速決策）

```bash
pdca_mini 做個網站
```

### 狀態管理

```bash
pdca status    # 查看當前任務狀態
pdca stop      # 停止當前任務
pdca help      # 顯示幫助信息
```

## 💬 互動指令

在專家討論過程中，您可以使用以下指令：

- `/intervene [專家] [指示]` - 介入特定專家的思考
- `/continue` - 讓團隊繼續討論
- `/status` - 查看當前進度
- `/help` - 顯示幫助
- `/quit` - 退出系統

### 介入範例

```
/intervene design 請考慮使用微服務架構
/intervene 開發 使用 Python FastAPI
/intervene 品質 需要 100% 測試覆蓋率
```

## 🏗️ 系統架構

```
用戶
 ↓
[協調者] - 您的唯一對話窗口
 ↓
專家團隊：
├── [🎨 設計專家] - 架構設計
├── [💻 開發專家] - 程式實作
├── [🔍 品質專家] - 測試驗證
├── [🚀 優化專家] - 性能改善
└── [📝 記錄代理] - 知識管理（非同步）
```

### 📁 記憶體系統

```
memories/
├── decisions/    # 重要決策和架構選擇
├── solutions/    # 具體問題解決方案
├── patterns/     # 設計模式和最佳實踐
├── learnings/    # 經驗教訓和改進心得
└── progress/     # 任務進度和里程碑
```

## 🤔 正確的質疑精神

### ❌ 錯誤示範
```
用戶：我需要建立登入系統
AI：這真的需要嗎？（質疑用戶需求）
```

### ✅ 正確示範
```
用戶：我需要建立登入系統
[設計專家] 我建議使用 Session 認證
[設計專家] 🤔 但我在質疑：這是最安全的方案嗎？
[設計專家] 💡 發現：OAuth2 + JWT 可能更適合
```

## 📁 專案結構

```
raiy-pdca-shokunin/
├── pdca                 # 主執行腳本（!pdca 指令）
├── pdca_mini.py         # 極簡版
├── README.md            # 專案說明
├── .pdca/               # 系統核心
│   ├── coordinator/     # 協調機制
│   ├── agents/          # 專家代理
│   ├── config.json      # 系統配置
│   └── current_task.json # 當前任務狀態
└── .claude/             # Claude CLI 整合
    ├── commands/        # 命令定義
    └── hooks/           # Hook 配置
```

## 🔧 配置說明

系統具備四大核心屬性：

1. **質疑精神** - 對解決方案保持批判思考
2. **追求卓越** - 不滿足於「能用」，追求「最優」
3. **自主搜尋** - 主動尋找最新最佳實踐
4. **技術敏銳度** - 保持對新技術的關注

## 💡 使用建議

1. **讓專家先分析** - 觀察初步討論，了解不同角度
2. **適時介入調整** - 在關鍵決策點給出您的偏好
3. **利用專業性** - 相信專家的專業判斷和批判思考
4. **保持最終控制** - 您永遠擁有最終決定權

## 🎯 MVP 開發理念

本系統遵循 MVP 開發原則：
- 沒有版本號，只有最新最好的版本
- 持續優化單一代碼庫
- 快速迭代，直接改進

## 🌟 職人版本特色

這是由 Claude + Claude Code CLI 協作設計的職人精神版本，特點：

### 與 GPT-o3 版本的差異
- **設計理念**：職人精神 vs. 複雜功能
- **核心原則**：質疑解決方案，尊重用戶需求
- **使用方式**：獨立命令行工具 + Claude 整合
- **架構理念**：極簡而深入 vs. 功能豐富

### 職人精神體現
1. **見微知著** - 從需求看見最佳解決方案
2. **精益求精** - 不滿足於「能用」，追求「最優」
3. **自我批判** - 持續質疑和改進自己的方案
4. **技術敏銳** - 保持對最新技術的敏感度

## 🚀 2.0 版本新特性

### ⚡ 真實多代理並行執行
- **asyncio.gather 並行**：5個代理同時工作，非模擬
- **ThreadPoolExecutor 整合**：基於 Anthropic 官方模式
- **智能降級機制**：API 失敗時自動回退到模擬模式
- **超時保護**：2分鐘超時設定，避免無限等待

### 📦 pip 套件化
- **一鍵安裝**：`pip install pdca-shokunin`
- **零配置啟動**：開箱即用，自動檢測 API Key
- **輕量設計**：套件大小 < 50KB，依賴最小化
- **向後兼容**：保持原有命令行介面

### 🔄 錯誤處理強化
- **指數退避重試**：API 失敗時智能重試
- **部分失敗處理**：部分代理失敗時仍能運作
- **實時錯誤回報**：透明的錯誤訊息和恢復建議

### 📝 智能記錄代理
- **非同步記錄**：不影響主流程效能
- **自動分類**：智能判斷記憶類型並歸檔
- **知識積累**：建立可查詢的知識庫
- **經驗傳承**：保存決策理由和最佳實踐

### 🧠 記憶體架構升級
- **分類存儲**：決策、方案、模式、經驗、進度
- **漸進式摘要**：定期壓縮和整理舊記憶
- **跨專案學習**：累積的知識可跨專案使用

---

**核心價值**：尊重您的需求，質疑我們的方案，追求最優解決，記錄每個成長！
