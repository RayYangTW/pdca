#!/usr/bin/env python3
"""
PDCA 記錄代理 - 智能分析和分類記憶
配合 claude -p 使用來分析 PDCA 執行過程
"""

import sys
import json
from datetime import datetime
from pathlib import Path

def generate_recorder_prompt(task_description):
    """生成記錄代理的分析提示"""
    
    prompt = f"""# 📝 PDCA 記錄代理分析

## 任務：{task_description}

作為 **[記錄代理]**，請分析本次 PDCA 任務的執行過程，並將關鍵內容分類記錄到相應的記憶庫中。

## 分析要點

### 1. 決策記錄 (decisions/)
- 識別重要的技術決策
- 記錄選擇的理由和考量
- 標記決策的參與者

### 2. 解決方案 (solutions/)
- 具體問題的解決方法
- 實施步驟和代碼片段
- 效果評估

### 3. 設計模式 (patterns/)
- 發現的可重用模式
- 最佳實踐總結
- 反模式警告

### 4. 經驗教訓 (learnings/)
- 遇到的問題和陷阱
- 學到的新知識
- 改進建議

### 5. 進度追蹤 (progress/)
- 完成的里程碑
- 時間消耗分析
- 後續計劃

## 輸出格式

請為每個相關類別生成一個 Markdown 檔案，格式如下：

```markdown
# [類別]/YYYY-MM-DD_[簡短標題].md

## 摘要
[一句話總結]

## 詳細內容
[具體分析內容]

## 標籤
#標籤1 #標籤2 #標籤3
```

請開始分析並生成記憶檔案！"""
    
    return prompt

def main():
    """主入口函數"""
    if len(sys.argv) > 1:
        # 移除 "分析" 關鍵字如果存在
        args = sys.argv[1:]
        if args[0] == "分析" and len(args) > 1:
            args = args[1:]
        
        task_description = " ".join(args)
        
        # 讀取 PDCA 任務資訊（如果存在）
        pdca_file = Path(".pdca/current_task.json")
        if pdca_file.exists():
            try:
                with open(pdca_file, "r", encoding="utf-8") as f:
                    task_data = json.load(f)
                    # 如果沒有傳入任務描述，使用檔案中的
                    if not task_description and "task" in task_data:
                        task_description = task_data["task"]
            except:
                pass
        
        if not task_description:
            task_description = "未指定任務"
        
        prompt = generate_recorder_prompt(task_description)
        print(prompt)
    else:
        print("使用方式: claude -p \"pdca-recorder 分析 [任務描述]\"")
        print("或在 PDCA 環境中: claude -p \"pdca-recorder\"")

if __name__ == "__main__":
    main()