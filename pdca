#!/usr/bin/env python3
"""
PDCA Shell 執行腳本
支援 Claude CLI 的 !pdca 指令前綴
"""

import sys
import json
import asyncio
from datetime import datetime
from pathlib import Path

# 添加當前目錄到 Python 路徑
sys.path.insert(0, str(Path(__file__).parent))

def create_task_file(task_description):
    """創建任務檔案供 Claude 讀取"""
    pdca_dir = Path(".pdca")
    pdca_dir.mkdir(exist_ok=True)
    
    task_data = {
        "task": task_description,
        "created_at": datetime.now().isoformat(),
        "status": "initiated",
        "source": "shell_command"
    }
    
    # 保存當前任務
    with open(pdca_dir / "current_task.json", "w", encoding="utf-8") as f:
        json.dump(task_data, f, indent=2, ensure_ascii=False)
    
    return task_data

def show_status():
    """顯示當前任務狀態"""
    pdca_dir = Path(".pdca")
    current_task_file = pdca_dir / "current_task.json"
    
    if not current_task_file.exists():
        print("📊 目前沒有進行中的 PDCA 任務")
        return
    
    with open(current_task_file, "r", encoding="utf-8") as f:
        task_data = json.load(f)
    
    print("📊 PDCA 任務狀態")
    print("=" * 40)
    print(f"任務: {task_data.get('task', 'N/A')}")
    print(f"狀態: {task_data.get('status', 'unknown')}")
    print(f"建立時間: {task_data.get('created_at', 'N/A')}")

def stop_task():
    """停止當前任務"""
    pdca_dir = Path(".pdca")
    current_task_file = pdca_dir / "current_task.json"
    
    if current_task_file.exists():
        current_task_file.unlink()
        print("🛑 PDCA 任務已停止")
    else:
        print("📊 目前沒有進行中的任務")

def show_help():
    """顯示幫助信息"""
    print("""
🎯 PDCA 多代理協調系統

使用方式：
  pdca [任務描述]     啟動 PDCA 協調流程
  pdca status         查看當前任務狀態
  pdca stop           停止當前任務
  pdca help           顯示此幫助

範例：
  pdca 建立用戶登入系統
  pdca 優化資料庫查詢效能
  pdca 設計微服務架構

與 Claude 整合：
  claude -p "$(pdca 建立登入系統)"

注意：
- 直接執行 pdca 命令會輸出協調內容
- 可配合 claude -p 使用來啟動 AI 協調
- 任務狀態會記錄在 .pdca/ 目錄中
    """)

def generate_pdca_output(task_description):
    """生成 PDCA 協調輸出"""
    output = f"""# 🎯 PDCA 多代理協調系統

## 任務：{task_description}

作為 **[協調者]**，我將啟動四大專家協作來處理這個任務：

### 🎨 [設計專家] - 架構設計
請分析需求並提出技術方案，記住要：
- 🤔 質疑設計決策的合理性
- 🔍 搜尋業界最佳實踐
- 💎 追求優雅可擴展的架構

### 💻 [開發專家] - 程式實作
基於設計方案進行實作，確保：
- 🤔 質疑實作方式是否最優
- 🔍 搜尋最新技術和工具
- 💎 追求高品質的代碼

### 🔍 [品質專家] - 測試驗證
驗證實作品質，要求：
- 🤔 質疑測試覆蓋率是否充分
- 🔍 搜尋最新測試方法
- 💎 追求零缺陷品質

### 🚀 [優化專家] - 性能改善
分析並優化系統，注重：
- 🤔 質疑是否解決根本問題
- 🔍 搜尋優化最佳實踐
- 💎 追求系統性改善

## 執行 PDCA 循環
1. **Plan**: 設計專家分析需求，提出方案
2. **Do**: 開發專家實作功能
3. **Check**: 品質專家驗證品質
4. **Act**: 優化專家提出改善

請開始協調處理任務：{task_description}"""
    
    return output

def main():
    """主入口函數"""
    args = sys.argv[1:]
    
    if not args:
        show_help()
        return
    
    command = args[0].lower()
    
    if command == "help" or command == "--help" or command == "-h":
        show_help()
    
    elif command == "status":
        show_status()
    
    elif command == "stop":
        stop_task()
    
    else:
        # 將所有參數視為任務描述
        task_description = " ".join(args)
        
        # 創建任務檔案（記錄用）
        create_task_file(task_description)
        
        # 直接輸出 PDCA 協調內容
        print(generate_pdca_output(task_description))

if __name__ == "__main__":
    main()